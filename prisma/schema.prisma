// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model User {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    email     String   @unique
    password  String
    picture   String?
    role      Role     @default(SUBSCRIBER)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Post    Post[]
    Comment Comment[]
}

enum Role {
    ADMIN
    AUTHOR
    SUBSCRIBER
}

model Post {
    id        String     @id @default(auto()) @map("_id") @db.ObjectId
    userId    String     @db.ObjectId
    title     String
    slug      String     @unique
    body      String
    status    PostStatus @default(DRAFT)
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt

    User         User           @relation(fields: [userId], references: [id])
    Comment      Comment[]
    PostCategory PostCategory[]
    PostTag      PostTag[]
    PostView     PostView?
}

enum PostStatus {
    DRAFT
    PUBLISHED
}

model Comment {
    id              String        @id @default(auto()) @map("_id") @db.ObjectId
    Post            Post          @relation(fields: [postId], references: [id])
    postId          String        @db.ObjectId
    User            User          @relation(fields: [userId], references: [id])
    userId          String        @db.ObjectId
    parentComment   Comment?      @relation("CommentReplies", fields: [parentCommentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    parentCommentId String?       @db.ObjectId
    replies         Comment[]     @relation("CommentReplies")
    commentBody     String
    status          CommentStatus @default(PENDING)
    createdAt       DateTime      @default(now())
}

enum CommentStatus {
    APPROVED
    PENDING
    SPAM
}

model Category {
    id           String         @id @default(auto()) @map("_id") @db.ObjectId
    name         String
    slug         String         @unique
    PostCategory PostCategory[]
}

model PostCategory {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    post       Post     @relation(fields: [postId], references: [id])
    postId     String   @db.ObjectId
    category   Category @relation(fields: [categoryId], references: [id])
    categoryId String   @db.ObjectId
}

model Tag {
    id    String    @id @default(auto()) @map("_id") @db.ObjectId
    name  String    @unique
    slug  String    @unique
    posts PostTag[]
}

model PostTag {
    id     String @id @default(auto()) @map("_id") @db.ObjectId
    post   Post   @relation(fields: [postId], references: [id])
    postId String @db.ObjectId
    tag    Tag    @relation(fields: [tagId], references: [id])
    tagId  String @db.ObjectId
}

model PostView {
    id        String @id @default(auto()) @map("_id") @db.ObjectId
    post      Post   @relation(fields: [postId], references: [id])
    postId    String @unique @db.ObjectId
    viewCount Int    @default(0)
    likeCount Int    @default(0)
}
